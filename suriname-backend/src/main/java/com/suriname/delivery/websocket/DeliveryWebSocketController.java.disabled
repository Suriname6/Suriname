package com.suriname.delivery.websocket;

import com.suriname.delivery.dto.DeliveryDetailDto;
import com.suriname.delivery.service.DeliveryService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import java.util.Map;

/**
 * 실시간 배송 추적 WebSocket Controller
 */
@Controller
@RequiredArgsConstructor
@Slf4j
public class DeliveryWebSocketController {

    private final DeliveryService deliveryService;
    private final SimpMessagingTemplate messagingTemplate;

    /**
     * 특정 배송의 실시간 추적 구독
     */
    @MessageMapping("/delivery/subscribe/{deliveryId}")
    @SendTo("/topic/delivery/{deliveryId}")
    public Map<String, Object> subscribeDelivery(@DestinationVariable Long deliveryId) {
        try {
            log.info("배송 실시간 추적 구독: deliveryId={}", deliveryId);
            
            // 현재 배송 상태 조회
            DeliveryDetailDto delivery = deliveryService.getDeliveryDetail(deliveryId);
            
            return Map.of(
                "type", "DELIVERY_STATUS",
                "deliveryId", deliveryId,
                "status", delivery.getStatus(),
                "trackingNo", delivery.getTrackingNo() != null ? delivery.getTrackingNo() : "",
                "carrierName", delivery.getCarrierName() != null ? delivery.getCarrierName() : "",
                "message", "실시간 추적이 시작되었습니다."
            );
            
        } catch (Exception e) {
            log.error("배송 구독 실패: deliveryId={}", deliveryId, e);
            return Map.of(
                "type", "ERROR",
                "message", "배송 정보를 찾을 수 없습니다."
            );
        }
    }

    /**
     * 접수번호로 배송 실시간 추적
     */
    @MessageMapping("/delivery/track/{requestNo}")
    @SendTo("/topic/tracking/{requestNo}")
    public Map<String, Object> trackByRequestNo(@DestinationVariable String requestNo) {
        try {
            log.info("접수번호 기반 실시간 추적: requestNo={}", requestNo);
            
            DeliveryDetailDto delivery = deliveryService.getDeliveryByRequestNo(requestNo);
            
            return Map.of(
                "type", "TRACKING_STATUS",
                "requestNo", requestNo,
                "deliveryId", delivery.getDeliveryId(),
                "status", delivery.getStatus(),
                "trackingNo", delivery.getTrackingNo() != null ? delivery.getTrackingNo() : "",
                "carrierName", delivery.getCarrierName() != null ? delivery.getCarrierName() : "",
                "message", "배송 추적 정보가 업데이트되었습니다."
            );
            
        } catch (Exception e) {
            log.error("접수번호 추적 실패: requestNo={}", requestNo, e);
            return Map.of(
                "type", "ERROR",
                "message", "해당 접수번호를 찾을 수 없습니다."
            );
        }
    }

    /**
     * 배송 상태 변경 시 실시간 알림 전송
     */
    public void notifyDeliveryStatusChange(Long deliveryId, String newStatus, String message) {
        try {
            log.info("배송 상태 변경 알림 전송: deliveryId={}, status={}", deliveryId, newStatus);
            
            Map<String, Object> notification = Map.of(
                "type", "STATUS_CHANGED",
                "deliveryId", deliveryId,
                "newStatus", newStatus,
                "message", message,
                "timestamp", System.currentTimeMillis()
            );
            
            // 특정 배송을 구독 중인 클라이언트들에게 알림
            messagingTemplate.convertAndSend("/topic/delivery/" + deliveryId, notification);
            
        } catch (Exception e) {
            log.error("배송 상태 변경 알림 실패: deliveryId={}", deliveryId, e);
        }
    }

    /**
     * 접수번호 기반 상태 변경 알림
     */
    public void notifyDeliveryStatusChangeByRequestNo(String requestNo, String newStatus, String message) {
        try {
            log.info("접수번호 기반 상태 변경 알림: requestNo={}, status={}", requestNo, newStatus);
            
            Map<String, Object> notification = Map.of(
                "type", "STATUS_CHANGED",
                "requestNo", requestNo,
                "newStatus", newStatus,
                "message", message,
                "timestamp", System.currentTimeMillis()
            );
            
            // 접수번호를 추적 중인 클라이언트들에게 알림
            messagingTemplate.convertAndSend("/topic/tracking/" + requestNo, notification);
            
        } catch (Exception e) {
            log.error("접수번호 기반 상태 변경 알림 실패: requestNo={}", requestNo, e);
        }
    }

    /**
     * 전체 배송 현황 브로드캐스트 (관리자용)
     */
    public void broadcastDeliveryUpdate(Map<String, Object> updateInfo) {
        try {
            log.info("전체 배송 현황 브로드캐스트");
            
            Map<String, Object> broadcast = Map.of(
                "type", "DELIVERY_BROADCAST",
                "data", updateInfo,
                "timestamp", System.currentTimeMillis()
            );
            
            messagingTemplate.convertAndSend("/topic/delivery/all", broadcast);
            
        } catch (Exception e) {
            log.error("배송 현황 브로드캐스트 실패", e);
        }
    }
}